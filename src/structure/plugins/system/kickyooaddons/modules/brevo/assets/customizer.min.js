(function (vue) {
  'use strict';

  var script$1 = {
    extends: Vue.component('field'),
    inject: ['Config'],
    data: () => ({
      folder_id: '',
      folders: [],
      lists: [],
      error: false
    }),
    computed: {
      apiKey() {
        return this.Config.values[`brevo_api`];
      }
    },
    mounted() {
      this.load();
    },
    methods: {
      load() {
        if (!this.apiKey) {
          return;
        }
        this.$http.post('theme/brevo/checkapi').then(res => {
          this.$http.post('theme/brevo/folder').then(res => {
            this.folders = res.data.folders;
          }, res => this.error = res.data);
        }, res => {
          this.error = res;
        });
      },
      loadLists() {
        if (!this.apiKey || !this.folder_id) {
          this.lists = [];
          return;
        }
        this.$http.post('theme/brevo/list', {
          folder: this.folder_id
        }).then(res => {
          this.lists = res.data.lists;
        }, res => this.error = res.data);
      }
    }
  };

  const _hoisted_1$1 = {
    class: "yo-sidebar-subheading"
  };
  const _hoisted_2$1 = {
    class: "uk-margin-small"
  };
  const _hoisted_3 = {
    disabled: "",
    value: ""
  };
  const _hoisted_4 = ["value"];
  const _hoisted_5 = {
    class: "uk-margin-small"
  };
  const _hoisted_6 = ["value"];
  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [vue.createElementVNode("h3", _hoisted_1$1, vue.toDisplayString(_ctx.$t('Folders')), 1), vue.createElementVNode("div", _hoisted_2$1, [vue.withDirectives(vue.createElementVNode("select", vue.mergeProps({
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.folder_id = $event)
    }, _ctx.attributes, {
      class: "uk-select",
      onChange: _cache[1] || (_cache[1] = (...args) => $options.loadLists && $options.loadLists(...args))
    }), [vue.createElementVNode("option", _hoisted_3, vue.toDisplayString(_ctx.$t('Select a Folder')), 1), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.folders, option => {
      return vue.openBlock(), vue.createElementBlock("option", {
        key: option.value,
        value: option.value
      }, vue.toDisplayString(option.text) + " (" + vue.toDisplayString(option.subscribers) + ")", 9, _hoisted_4);
    }), 128))], 16), [[vue.vShow, _ctx.folders.length], [vue.vModelSelect, _ctx.folder_id]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text-muted uk-margin-small"
    }, vue.toDisplayString(_ctx.$t('Select the folder to get lists.')), 513), [[vue.vShow, _ctx.folders.length]])]), vue.withDirectives(vue.createElementVNode("h3", {
      class: "yo-sidebar-subheading"
    }, vue.toDisplayString(_ctx.$t('Lists')), 513), [[vue.vShow, _ctx.lists.length && _ctx.folder_id !== '']]), vue.withDirectives(vue.createElementVNode("div", _hoisted_5, [vue.withDirectives(vue.createElementVNode("select", vue.mergeProps({
      "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => _ctx.value[_ctx.folder_id] = $event)
    }, _ctx.attributes, {
      class: "uk-select",
      multiple: "multiple",
      row: "20"
    }), [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.lists, option => {
      return vue.openBlock(), vue.createElementBlock("option", {
        key: option.value,
        value: option.value
      }, "#" + vue.toDisplayString(option.value) + " " + vue.toDisplayString(option.text) + " (" + vue.toDisplayString(option.subscribers) + ")", 9, _hoisted_6);
    }), 128))], 16), [[vue.vShow, _ctx.lists.length && _ctx.folder_id !== ''], [vue.vModelSelect, _ctx.value[_ctx.folder_id]]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text-muted uk-margin-small"
    }, vue.toDisplayString(_ctx.$t('Select the list to subscribe to.')), 513), [[vue.vShow, _ctx.lists.length]])], 512), [[vue.vShow, _ctx.lists.length && _ctx.folder_id !== '']]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text uk-text-danger uk-margin-small"
    }, vue.toDisplayString(_ctx.$t('Enter the API key in Settings > External Services.')), 513), [[vue.vShow, !$options.apiKey]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text uk-text-danger uk-margin-small"
    }, vue.toDisplayString(_ctx.$t(`${_ctx.error}`)), 513), [[vue.vShow, _ctx.error]])]);
  }

  script$1.render = render$1;

  var script = {
    extends: Vue.component('field'),
    inject: ['Config'],
    data: () => ({
      templates: [],
      error: false
    }),
    computed: {
      apiKey() {
        return this.Config.values[`brevo_api`];
      }
    },
    mounted() {
      this.load();
    },
    methods: {
      load() {
        if (!this.apiKey) {
          return;
        }
        this.$http.post('theme/brevo/checkapi').then(res => {
          this.$http.post('theme/brevo/template').then(res => {
            this.templates = res.data.templates;
            if (!this.value && this.templates.length) {
              this.value = this.templates[0].value;
            }
          }, res => this.error = res.data);
        }, res => {
          this.error = res;
        });
      }
    }
  };

  const _hoisted_1 = {
    disabled: "",
    value: ""
  };
  const _hoisted_2 = ["value"];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [vue.withDirectives(vue.createElementVNode("select", vue.mergeProps({
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.value = $event)
    }, _ctx.attributes, {
      class: "uk-select"
    }), [vue.createElementVNode("option", _hoisted_1, vue.toDisplayString(_ctx.$t('Select a Template')), 1), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.templates, option => {
      return vue.openBlock(), vue.createElementBlock("option", {
        key: option.value,
        value: option.value
      }, vue.toDisplayString(option.text), 9, _hoisted_2);
    }), 128))], 16), [[vue.vShow, _ctx.templates.length], [vue.vModelSelect, _ctx.value]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text-muted uk-margin-small"
    }, vue.toDisplayString(_ctx.$t('Select the template.')), 513), [[vue.vShow, _ctx.templates.length]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text uk-text-danger uk-margin-small"
    }, vue.toDisplayString(_ctx.$t('Enter the API key in Settings > External Services.')), 513), [[vue.vShow, !$options.apiKey]]), vue.withDirectives(vue.createElementVNode("p", {
      class: "uk-text uk-text-danger uk-margin-small"
    }, vue.toDisplayString(_ctx.$t(`${_ctx.error}`)), 513), [[vue.vShow, _ctx.error]])]);
  }

  script.render = render;

  window.$fields.FieldKicktempBrevoList = script$1;
  window.$fields.FieldKicktempBrevoTemplate = script;

})(Vue);
