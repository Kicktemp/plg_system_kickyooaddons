window.exitIntent = {
  delay: 0,
  showOnDelay: false,
  cookieExp: 1,
  showOncePerSession: false,
  modalid: '',

  cookieManager: {
    // Create a cookie
    create: function(name, value, days, sessionOnly) {
      var expires = "";

      if(sessionOnly)
        expires = "; expires=0"
      else if(days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
      }

      document.cookie = name + "=" + value + expires + "; path=/";
    },

    // Get the value of a cookie
    get: function(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(";");

      for(var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == " ") c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
      }

      return null;
    },

    // Delete a cookie
    erase: function(name) {
      this.create(name, "", -1);
    }
  },

  checkCookie: function() {
    // Handle cookie reset
    if(this.cookieExp <= 0) {
      // Handle showing pop up once per browser session.
      if(this.showOncePerSession && this.cookieManager.get(this.modalid + "_shown_session") == "true")
        return true;

      this.cookieManager.erase(this.modalid + "_shown");
      return false;
    }

    // If cookie is set to true
    if(this.cookieManager.get(this.modalid + "_shown") == "true")
      return true;

    return false;
  },

  // Show the popup
  showPopup: function() {
    if(this.shown) return;

    this.shown = true;

    this.cookieManager.create(this.modalid + "_shown", "true", this.cookieExp, false);
    this.cookieManager.create(this.modalid + "_shown_session", "true", 0, true);

    var modal = document.getElementById(this.modalid);

    UIkit.modal(modal).show();
  },

  // Event listener initialisation for all browsers
  addEvent: function (obj, event, callback) {
    if(obj.addEventListener)
      obj.addEventListener(event, callback, false);
    else if(obj.attachEvent)
      obj.attachEvent("on" + event, callback);
  },

  // Load event listeners for the popup
  loadEvents: function() {
    // Track mouseout event on document
    this.addEvent(document, "mouseout", function(e) {
      e = e ? e : window.event;

      // If this is an autocomplete element.
      if(e.target.tagName.toLowerCase() == "input")
        return;

      // Get the current viewport width.
      var vpWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

      // If the current mouse X position is within 50px of the right edge
      // of the viewport, return.
      if(e.clientX >= (vpWidth - 50))
        return;

      // If the current mouse Y position is not within 50px of the top
      // edge of the viewport, return.
      if(e.clientY >= 50)
        return;

      // Reliable, works on mouse exiting window and
      // user switching active program
      var from = e.relatedTarget || e.toElement;
      if(!from)
        exitIntent.showPopup();
    }.bind(this));
  },

  // Set user defined options for the popup
  setOptions: function(opts) {
    this.delay = (typeof opts.delay === 'undefined') ? this.delay : opts.delay;
    this.showOnDelay = (typeof opts.showOnDelay === 'undefined') ? this.showOnDelay : opts.showOnDelay;
    this.cookieExp = (typeof opts.cookieExp === 'undefined') ? this.cookieExp : opts.cookieExp;
    this.showOncePerSession = (typeof opts.showOncePerSession === 'undefined') ? this.showOncePerSession : opts.showOncePerSession;
    this.modalid = (typeof opts.modalid === 'undefined') ? this.modalid : opts.modalid;
  },

  // Ensure the DOM has loaded
  domReady: function(callback) {
    (document.readyState === "interactive" || document.readyState === "complete") ? callback() : this.addEvent(document, "DOMContentLoaded", callback);
  },
  // Initialize
  init: function(opts) {
    // Handle options
    if(typeof opts !== 'undefined')
      this.setOptions(opts);

    // Once the DOM has fully loaded
    this.domReady(function() {

      // Handle the cookie
      if(exitIntent.checkCookie())
        return;

      // Load events
      setTimeout(function() {
        exitIntent.loadEvents();

        if(exitIntent.showOnDelay)
          exitIntent.showPopup();
      }, exitIntent.delay * 1000);
    });
  }
}
