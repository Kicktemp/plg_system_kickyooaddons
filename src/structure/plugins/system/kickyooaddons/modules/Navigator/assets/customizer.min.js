(function (vue) {
  'use strict';

  var script$1 = {
    extends: Vue.component('field'),
    inject: ['Config', '$node', 'Builder'],
    data: () => ({
      fields: [],
      error: false
    }),
    mounted() {
      this.load();
    },
    methods: {
      load() {
        var item = this.Builder.parent(this.$node);
        this.fields = this.Builder.parent(item).children;
      }
    }
  };

  const _hoisted_1$1 = {
    class: "uk-margin-small"
  };
  const _hoisted_2$1 = {
    disabled: "",
    value: ""
  };
  const _hoisted_3$1 = ["value"];
  function render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [vue.withDirectives(vue.createElementVNode("div", _hoisted_1$1, [vue.withDirectives(vue.createElementVNode("select", vue.mergeProps({
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.value = $event)
    }, _ctx.attributes, {
      class: "uk-select"
    }), [vue.createElementVNode("option", _hoisted_2$1, vue.toDisplayString(_ctx.$t('Select a Target')), 1), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.fields, option => {
      return vue.openBlock(), vue.createElementBlock("option", {
        key: option.props.modalid,
        value: option.props.modalid
      }, vue.toDisplayString(option.props.title), 9, _hoisted_3$1);
    }), 128))], 16), [[vue.vShow, _ctx.fields.length], [vue.vModelSelect, _ctx.value]])], 512), [[vue.vShow, _ctx.fields.length]])]);
  }

  script$1.render = render$1;

  var script = {
    extends: Vue.component('field'),
    inject: ['Config', '$node', 'Builder'],
    data: () => ({
      fields: [],
      error: false
    }),
    mounted() {
      this.load();
    },
    methods: {
      load() {
        this.fields = this.$node.children;
      }
    }
  };

  const _hoisted_1 = {
    class: "uk-margin-small"
  };
  const _hoisted_2 = {
    value: ""
  };
  const _hoisted_3 = ["value"];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [vue.withDirectives(vue.createElementVNode("div", _hoisted_1, [vue.withDirectives(vue.createElementVNode("select", vue.mergeProps({
      "onUpdate:modelValue": _cache[0] || (_cache[0] = $event => _ctx.value = $event)
    }, _ctx.attributes, {
      class: "uk-select"
    }), [vue.createElementVNode("option", _hoisted_2, vue.toDisplayString(_ctx.$t('Select a Target')), 1), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.fields, option => {
      return vue.openBlock(), vue.createElementBlock("option", {
        key: option.props.modalid,
        value: option.props.modalid
      }, vue.toDisplayString(option.props.title), 9, _hoisted_3);
    }), 128))], 16), [[vue.vShow, _ctx.fields.length], [vue.vModelSelect, _ctx.value]])], 512), [[vue.vShow, _ctx.fields.length]])]);
  }

  script.render = render;

  window.$fields.FieldKicktempNavigatorList = script$1;
  window.$fields.FieldKicktempNavigatorEntry = script;

})(Vue);
