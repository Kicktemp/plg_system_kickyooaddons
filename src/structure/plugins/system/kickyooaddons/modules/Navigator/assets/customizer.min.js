(function () {
  'use strict';

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //

  var script$1 = {
    extends: Vue.component('field'),
    inject: ['Config', '$node', 'Builder'],
    data: () => ({
      fields: [],
      error: false
    }),
    mounted() {
      this.load();
    },
    methods: {
      load() {
        var item = this.Builder.parent(this.$node);
        this.fields = this.Builder.parent(item).children;
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
          createInjectorSSR = createInjector;
          createInjector = shadowMode;
          shadowMode = false;
      }
      // Vue.extend constructor export interop.
      const options = typeof script === 'function' ? script.options : script;
      // render functions
      if (template && template.render) {
          options.render = template.render;
          options.staticRenderFns = template.staticRenderFns;
          options._compiled = true;
          // functional template
          if (isFunctionalTemplate) {
              options.functional = true;
          }
      }
      // scopedId
      if (scopeId) {
          options._scopeId = scopeId;
      }
      let hook;
      if (moduleIdentifier) {
          // server build
          hook = function (context) {
              // 2.3 injection
              context =
                  context || // cached call
                      (this.$vnode && this.$vnode.ssrContext) || // stateful
                      (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                  context = __VUE_SSR_CONTEXT__;
              }
              // inject component styles
              if (style) {
                  style.call(this, createInjectorSSR(context));
              }
              // register component module identifier for async chunk inference
              if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
              }
          };
          // used by ssr in case component is cached and beforeCreate
          // never gets called
          options._ssrRegister = hook;
      }
      else if (style) {
          hook = shadowMode
              ? function (context) {
                  style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
              }
              : function (context) {
                  style.call(this, createInjector(context));
              };
      }
      if (hook) {
          if (options.functional) {
              // register for functional component in vue file
              const originalRender = options.render;
              options.render = function renderWithStyleInjection(h, context) {
                  hook.call(context);
                  return originalRender(h, context);
              };
          }
          else {
              // inject component registration as beforeCreate hook
              const existing = options.beforeCreate;
              options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
      }
      return script;
  }

  /* script */
  const __vue_script__$1 = script$1;

  /* template */
  var __vue_render__$1 = function () {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c('div', [_c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.fields.length,
        expression: "fields.length"
      }],
      staticClass: "uk-margin-small"
    }, [_c('select', _vm._b({
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.fields.length,
        expression: "fields.length"
      }, {
        name: "model",
        rawName: "v-model",
        value: _vm.value,
        expression: "value"
      }],
      staticClass: "uk-select",
      on: {
        "change": function ($event) {
          var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
            return o.selected;
          }).map(function (o) {
            var val = "_value" in o ? o._value : o.value;
            return val;
          });
          _vm.value = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
        }
      }
    }, 'select', _vm.attributes, false), [_c('option', {
      attrs: {
        "disabled": "",
        "value": ""
      }
    }, [_vm._v(_vm._s(_vm.$t('Select a Target')))]), _vm._v(" "), _vm._l(_vm.fields, function (option) {
      return _c('option', {
        key: option.props.modalid,
        domProps: {
          "value": option.props.modalid
        }
      }, [_vm._v(_vm._s(option.props.title))]);
    })], 2)])]);
  };
  var __vue_staticRenderFns__$1 = [];

  /* style */
  const __vue_inject_styles__$1 = undefined;
  /* scoped */
  const __vue_scope_id__$1 = undefined;
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  const __vue_component__$1 = /*#__PURE__*/normalizeComponent({
    render: __vue_render__$1,
    staticRenderFns: __vue_staticRenderFns__$1
  }, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //

  var script = {
    extends: Vue.component('field'),
    inject: ['Config', '$node', 'Builder'],
    data: () => ({
      fields: [],
      error: false
    }),
    mounted() {
      this.load();
    },
    methods: {
      load() {
        this.fields = this.$node.children;
      }
    }
  };

  /* script */
  const __vue_script__ = script;

  /* template */
  var __vue_render__ = function () {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c('div', [_c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.fields.length,
        expression: "fields.length"
      }],
      staticClass: "uk-margin-small"
    }, [_c('select', _vm._b({
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.fields.length,
        expression: "fields.length"
      }, {
        name: "model",
        rawName: "v-model",
        value: _vm.value,
        expression: "value"
      }],
      staticClass: "uk-select",
      on: {
        "change": function ($event) {
          var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
            return o.selected;
          }).map(function (o) {
            var val = "_value" in o ? o._value : o.value;
            return val;
          });
          _vm.value = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
        }
      }
    }, 'select', _vm.attributes, false), [_c('option', {
      attrs: {
        "value": ""
      }
    }, [_vm._v(_vm._s(_vm.$t('Select a Target')))]), _vm._v(" "), _vm._l(_vm.fields, function (option) {
      return _c('option', {
        key: option.props.modalid,
        domProps: {
          "value": option.props.modalid
        }
      }, [_vm._v(_vm._s(option.props.title))]);
    })], 2)])]);
  };
  var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  const __vue_component__ = /*#__PURE__*/normalizeComponent({
    render: __vue_render__,
    staticRenderFns: __vue_staticRenderFns__
  }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

  window.$fields.FieldKicktempNavigatorList = __vue_component__$1;
  window.$fields.FieldKicktempNavigatorEntry = __vue_component__;

})();
